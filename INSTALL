TODO.  Work in progress...
TODO:  Consider making a setup.py that does this for you. 


#wiring pi install
sudo apt-get install git-core
git clone git://git.drogon.net/wiringPi
cd wiringPi
./build

git clone https://github.com/evanmj/calzone.git
cd calzone
mkdir tmp

#build virtual env from tutorial 
python virtualenv.py flask

#install flask
flask/bin/pip install flask
flask/bin/pip install flask-login
flask/bin/pip install flask-openid
flask/bin/pip install flask-mail
flask/bin/pip install sqlalchemy==0.7.9
flask/bin/pip install sqlalchemy-migrate
flask/bin/pip install flask-whooshalchemy
flask/bin/pip install flask-wtf
flask/bin/pip install flask-babel
flask/bin/pip install flup

#install pygame

#Install pygame Deps...
sudo apt-get install libv41-dev python-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsdl1.2-dev libsmpeg-dev python-numpy subversion libportmidi-dev ffmpeg libswscale-dev libavformat-dev libavcodec-dev

#fix some v4l BS
sudo ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h

#install pygame in virtualenv
sudo flask/bin/pip install pygame


#run setup.py, only it does not work yet, so dont.
#./setup.py

#create empty database
./create_db.py

#set up static stuff like users, basic zone settings, etc.
(with your favorite editor), edit config.py, fill in variables

#test:

#run flask server in debug mode.
./run_flask.py   

#run alarm logic background loop (in a new terminal)
./run_almlogic.py

#test with browser:
http://127.0.0.1:5000/

#you'll want to deply it to a real web server when finished, and set alarmlogic.py to start on system boot.
#(more on those as I get time (TODO)
